{"componentChunkName":"component---src-templates-post-template-tsx","path":"/JS에서 텍스트 어떻게 쓰세요/","result":{"data":{"markdownRemark":{"id":"99af3f8d-ed25-5b63-968e-8d9176097299","html":"<p>js에서 dom을 조작할 때 텍스트를 이용하는 방법은 여러가지가 있다.\n문득 어떤 방법을 사용하는게 맞는지 고민이 들어서 알아보고 정리해보았다!</p>\n<h2>textContent</h2>\n<ul>\n<li><code class=\"language-text\">Node</code>의 속성으로 해당 Element의 텍스트 값을 읽어온다.</li>\n<li>raw text로 다른 요소들에 비해 파싱이 빠르다.</li>\n<li>script나 style에 상관없이 해당 노드가 가진 텍스트 값을 모두 읽어옴.</li>\n</ul>\n<br />\n<h2>innerText</h2>\n<ul>\n<li><code class=\"language-text\">Element</code>의 속성으로 해당 Element의 텍스트 값을 읽어온다.</li>\n<li>실제 눈에 보이는 결과값, 사람이 읽을 수 있는 요소만 가져옴. -> <code class=\"language-text\">textContent</code> 와의 차이점</li>\n<li>script나 style에 의해 숨겨진 요소는 반환하지 않음!</li>\n<li>IE(8이하) 에 활용.</li>\n</ul>\n<br />\n<h2>textContent와 innerText의 차이 보기</h2>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>aaa<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>bbb<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>인 html이 있을 때</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> body <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> textContent <span class=\"token operator\">=</span> body<span class=\"token punctuation\">.</span>textContent<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> innerText <span class=\"token operator\">=</span> body<span class=\"token punctuation\">.</span>innerText<span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>textContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'aaabbb'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>innerText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'aaa'</span></code></pre></div>\n<p>textContent는 style에 관계없이 aaabbb를 반환하지만,\ninnerText는 눈에 보이는 aaa만 반환한다.</p>\n<br />\n<h2>innerHTML</h2>\n<ul>\n<li><code class=\"language-text\">Element</code>의 속성으로 해당 Element의 HTML을 읽어온다.</li>\n<li>❗️ XSS 공격 위험 - 보안 문제 있음\n<ul>\n<li>XSS(Cross-Site Scripting)은 관리자가 아닌 이가 웹 페이지에 악성 스크립트를 삽입할 수 있는 취약점이라고 한다.</li>\n<li>게시판에 악성 스크립트가 담긴 글을 올리는 등 방식으로 악용된다고 함.</li>\n</ul>\n</li>\n</ul>\n<br />\n<h2>결론</h2>\n<ul>\n<li><code class=\"language-text\">textContent</code> 가 성능과 보안상으로 권장됨.</li>\n<li><code class=\"language-text\">innerText</code> 는 필요한 경우에 사용하면 된다. (렌더링 텍스트가 필요하거나 IE8이하)</li>\n<li>html의 파싱이 필요한 것이 아니면 가급적 <code class=\"language-text\">innerHtml</code> 은 사용을 지양하자.</li>\n</ul>\n<br />\n<h2>참고자료</h2>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/API/Node/textContent\">https://developer.mozilla.org/ko/docs/Web/API/Node/textContent</a>\n<a href=\"https://developer.mozilla.org/ko/docs/Web/API/HTMLElement/innerText\">https://developer.mozilla.org/ko/docs/Web/API/HTMLElement/innerText</a>\n<a href=\"https://developer.mozilla.org/ko/docs/Web/API/Element/innerHTML\">https://developer.mozilla.org/ko/docs/Web/API/Element/innerHTML</a>\n<a href=\"https://developer.mozilla.org/ko/docs/Web/API/Document/createTextNode\">https://developer.mozilla.org/ko/docs/Web/API/Document/createTextNode</a>\n<a href=\"https://velog.io/@raram2/%EB%8B%B9%EC%8B%A0%EC%9D%B4-innerHTML%EC%9D%84-%EC%93%B0%EB%A9%B4-%EC%95%88%EB%90%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\">https://velog.io/@raram2/%EB%8B%B9%EC%8B%A0%EC%9D%B4-innerHTML%EC%9D%84-%EC%93%B0%EB%A9%B4-%EC%95%88%EB%90%98%EB%8A%94-%EC%9D%B4%EC%9C%A0</a></p>","fields":{"slug":"/JS에서 텍스트 어떻게 쓰세요/"},"frontmatter":{"title":"JS에서 텍스트 어떻게 쓰세요?","date":"2023-02-27","summary":"js에서의 올바른 텍스트 조작 방법을 알아보자.","tags":["DOM","JavaScript"],"published":true}}},"pageContext":{"slug":"/JS에서 텍스트 어떻게 쓰세요/"}},"staticQueryHashes":["3764592887"],"slicesMap":{}}